'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/Button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/Input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { 
  Package, 
  X,
  Plus,
  Edit,
  Trash2,
  Warehouse,
  Calendar,
  DollarSign,
  Activity,
  CheckCircle,
  AlertTriangle,
  Clock,
  MapPin
} from 'lucide-react';
import { useGetWarehousesQuery } from '@/lib/api/warehousesApi';

interface GreyStockLotDetailsProps {
  grn: any;
  onClose: () => void;
  onRefresh: () => void;
}

interface Lot {
  lotNumber: string;
  lotQuantity: number;
  lotUnit: string;
  lotStatus: string;
  receivedDate: string;
  expiryDate?: string;
  qualityGrade: string;
  storageLocation: {
    warehouseName: string;
    rackNumber?: string;
    shelfNumber?: string;
    binNumber?: string;
  };
  costPerUnit: number;
  totalCost: number;
  remarks?: string;
}

interface LotDetails {
  grnNumber: string;
  fabricDetails: any;
  stockBalance: any;
  lotsByStatus: {
    active: Lot[];
    consumed: Lot[];
    damaged: Lot[];
    reserved: Lot[];
  };
  totalLots: number;
}

export default function GreyStockLotDetails({ grn, onClose, onRefresh }: GreyStockLotDetailsProps) {
  const [lotDetails, setLotDetails] = useState<LotDetails | null>(null);
  const [loading, setLoading] = useState(true);
  const [showAddLotForm, setShowAddLotForm] = useState(false);
  const [newLot, setNewLot] = useState({
    lotNumber: '',
    lotQuantity: 0,
    lotUnit: 'meters',
    qualityGrade: 'A',
    costPerUnit: 0,
    warehouseId: '',
    warehouseName: '',
    rackNumber: '',
    shelfNumber: '',
    binNumber: '',
    expiryDate: '',
    remarks: ''
  });

  const [lotCounter, setLotCounter] = useState(1);

  // Get warehouses for the company
  const { data: warehousesData, isLoading: warehousesLoading } = useGetWarehousesQuery({
    companyId: grn.companyId,
    page: 1,
    limit: 100
  }, {
    skip: !grn.companyId
  });

  useEffect(() => {
    fetchLotDetails();
  }, [grn._id]);

  // Auto-generate lot number
  const generateLotNumber = () => {
    const date = new Date();
    const year = date.getFullYear().toString().slice(-2);
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const day = date.getDate().toString().padStart(2, '0');
    const counter = lotCounter.toString().padStart(3, '0');
    
    return `LOT-${year}${month}${day}-${counter}`;
  };

  const fetchLotDetails = async () => {
    try {
      setLoading(true);
      const response = await fetch(`/api/grey-fabric-inward/${grn._id}/lots`);
      const data = await response.json();
      
      if (data.success) {
        setLotDetails(data.data);
        // Set lot counter based on existing lots
        setLotCounter(data.data.totalLots + 1);
      }
    } catch (error) {
      console.error('Error fetching lot details:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleAddLot = async () => {
    if (!newLot.lotQuantity || !newLot.lotUnit || !newLot.warehouseId) {
      alert('Please fill all required lot fields (Quantity, Unit, and Warehouse)');
      return;
    }

    try {
      // Auto-generate lot number
      const autoGeneratedLotNumber = generateLotNumber();
      
      const lotData = {
        ...newLot,
        lotNumber: autoGeneratedLotNumber
      };

      const response = await fetch(`/api/grey-fabric-inward/${grn._id}/lots`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ lotData }),
      });
      
      const data = await response.json();
      if (data.success) {
        setLotCounter(prev => prev + 1);
        setShowAddLotForm(false);
        setNewLot({
          lotNumber: '',
          lotQuantity: 0,
          lotUnit: 'meters',
          qualityGrade: 'A',
          costPerUnit: 0,
          warehouseId: '',
          warehouseName: '',
          rackNumber: '',
          shelfNumber: '',
          binNumber: '',
          expiryDate: '',
          remarks: ''
        });
        fetchLotDetails();
        onRefresh();
      }
    } catch (error) {
      console.error('Error adding lot:', error);
    }
  };

  const handleUpdateLotStatus = async (lotNumber: string, status: string) => {
    try {
      const response = await fetch(`/api/grey-fabric-inward/${grn._id}/lots/${lotNumber}/status`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ status }),
      });
      
      const data = await response.json();
      if (data.success) {
        fetchLotDetails();
        onRefresh();
      }
    } catch (error) {
      console.error('Error updating lot status:', error);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-green-100 text-green-800';
      case 'consumed': return 'bg-blue-100 text-blue-800';
      case 'damaged': return 'bg-red-100 text-red-800';
      case 'reserved': return 'bg-yellow-100 text-yellow-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'active': return <CheckCircle className="h-4 w-4" />;
      case 'consumed': return <Package className="h-4 w-4" />;
      case 'damaged': return <AlertTriangle className="h-4 w-4" />;
      case 'reserved': return <Clock className="h-4 w-4" />;
      default: return <Activity className="h-4 w-4" />;
    }
  };

  if (loading) {
    return (
      <Card className="border-0 shadow-xl">
        <CardHeader className="bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-t-xl">
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2">
              <Package className="h-6 w-6" />
              Lot Details - {grn.grnNumber}
            </CardTitle>
            <Button variant="ghost" size="sm" onClick={onClose} className="text-white hover:bg-white/20">
              <X className="h-4 w-4" />
            </Button>
          </div>
        </CardHeader>
        <CardContent className="p-8">
          <div className="flex items-center justify-center h-32">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600"></div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="border-0 shadow-xl">
      <CardHeader className="bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-t-xl">
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <Package className="h-6 w-6" />
            Lot Details - {lotDetails?.grnNumber || grn.grnNumber}
          </CardTitle>
          <div className="flex gap-2">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setShowAddLotForm(true)}
              className="text-white hover:bg-white/20"
            >
              <Plus className="h-4 w-4 mr-1" />
              Add Lot
            </Button>
            <Button variant="ghost" size="sm" onClick={onClose} className="text-white hover:bg-white/20">
              <X className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent className="p-6">
        {/* Fabric Details */}
        {lotDetails?.fabricDetails && (
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">Fabric Information</h3>
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div className="bg-blue-50 rounded-lg p-4">
                <p className="text-sm text-blue-600 font-medium">Type</p>
                <p className="text-lg font-bold text-blue-900">{lotDetails.fabricDetails.fabricType}</p>
              </div>
              <div className="bg-green-50 rounded-lg p-4">
                <p className="text-sm text-green-600 font-medium">Color</p>
                <p className="text-lg font-bold text-green-900">{lotDetails.fabricDetails.color}</p>
              </div>
              <div className="bg-purple-50 rounded-lg p-4">
                <p className="text-sm text-purple-600 font-medium">GSM</p>
                <p className="text-lg font-bold text-purple-900">{lotDetails.fabricDetails.gsm}</p>
              </div>
              <div className="bg-orange-50 rounded-lg p-4">
                <p className="text-sm text-orange-600 font-medium">Grade</p>
                <p className="text-lg font-bold text-orange-900">{lotDetails.fabricDetails.fabricGrade}</p>
              </div>
            </div>
          </div>
        )}

        {/* Stock Balance Summary */}
        {lotDetails?.stockBalance && (
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">Stock Balance</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Card className="border-0 bg-gradient-to-br from-blue-50 to-blue-100">
                <CardContent className="p-4">
                  <p className="text-sm text-blue-600 font-medium mb-1">Total Meters</p>
                  <p className="text-xl font-bold text-blue-900">{lotDetails.stockBalance.totalMeters}</p>
                  <p className="text-sm text-blue-700">Available: {lotDetails.stockBalance.availableMeters}</p>
                </CardContent>
              </Card>
              <Card className="border-0 bg-gradient-to-br from-green-50 to-green-100">
                <CardContent className="p-4">
                  <p className="text-sm text-green-600 font-medium mb-1">Total Yards</p>
                  <p className="text-xl font-bold text-green-900">{lotDetails.stockBalance.totalYards}</p>
                  <p className="text-sm text-green-700">Available: {lotDetails.stockBalance.availableYards}</p>
                </CardContent>
              </Card>
              <Card className="border-0 bg-gradient-to-br from-purple-50 to-purple-100">
                <CardContent className="p-4">
                  <p className="text-sm text-purple-600 font-medium mb-1">Total Pieces</p>
                  <p className="text-xl font-bold text-purple-900">{lotDetails.stockBalance.totalPieces}</p>
                  <p className="text-sm text-purple-700">Available: {lotDetails.stockBalance.availablePieces}</p>
                </CardContent>
              </Card>
            </div>
          </div>
        )}

        {/* Add Lot Form */}
        {showAddLotForm && (
          <Card className="mb-6 border-2 border-purple-200">
            <CardHeader>
              <CardTitle className="text-purple-800">Add New Lot</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="text-sm font-medium text-gray-700 mb-2 block">Lot Number</label>
                  <Input
                    value={generateLotNumber()}
                    disabled
                    placeholder="Auto-generated"
                    className="bg-gray-100 text-gray-600"
                  />
                  <p className="text-xs text-gray-500 mt-1">Auto-generated based on date and sequence</p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-700 mb-2 block">Quantity</label>
                  <Input
                    type="number"
                    value={newLot.lotQuantity}
                    onChange={(e) => setNewLot(prev => ({ ...prev, lotQuantity: Number(e.target.value) }))}
                    placeholder="Enter quantity"
                  />
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-700 mb-2 block">Unit</label>
                  <Select value={newLot.lotUnit} onValueChange={(value) => setNewLot(prev => ({ ...prev, lotUnit: value }))}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent className="bg-white border border-gray-200 shadow-lg z-50">
                      <SelectItem value="meters" className="bg-white hover:bg-gray-50">Meters</SelectItem>
                      <SelectItem value="yards" className="bg-white hover:bg-gray-50">Yards</SelectItem>
                      <SelectItem value="pieces" className="bg-white hover:bg-gray-50">Pieces</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-700 mb-2 block">Quality Grade</label>
                  <Select value={newLot.qualityGrade} onValueChange={(value) => setNewLot(prev => ({ ...prev, qualityGrade: value }))}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent className="bg-white border border-gray-200 shadow-lg z-50">
                      <SelectItem value="A+" className="bg-white hover:bg-gray-50">A+</SelectItem>
                      <SelectItem value="A" className="bg-white hover:bg-gray-50">A</SelectItem>
                      <SelectItem value="B+" className="bg-white hover:bg-gray-50">B+</SelectItem>
                      <SelectItem value="B" className="bg-white hover:bg-gray-50">B</SelectItem>
                      <SelectItem value="C" className="bg-white hover:bg-gray-50">C</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-700 mb-2 block">Cost Per Unit</label>
                  <Input
                    type="number"
                    value={newLot.costPerUnit}
                    onChange={(e) => setNewLot(prev => ({ ...prev, costPerUnit: Number(e.target.value) }))}
                    placeholder="Enter cost per unit"
                  />
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-700 mb-2 block">Warehouse *</label>
                  <Select 
                    value={newLot.warehouseId} 
                    onValueChange={(value) => {
                      const selectedWarehouse = warehousesData?.data?.find((w: any) => w._id === value);
                      setNewLot(prev => ({ 
                        ...prev, 
                        warehouseId: value,
                        warehouseName: selectedWarehouse?.warehouseName || ''
                      }));
                    }}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder={warehousesLoading ? "Loading..." : "Select Warehouse"} />
                    </SelectTrigger>
                    <SelectContent className="bg-white border border-gray-200 shadow-lg z-50">
                      {warehousesLoading ? (
                        <SelectItem value="loading" disabled className="bg-white hover:bg-gray-50">Loading warehouses...</SelectItem>
                      ) : warehousesData?.data && warehousesData.data.length > 0 ? (
                        warehousesData.data.map((warehouse: any) => (
                          <SelectItem key={warehouse._id} value={warehouse._id} className="bg-white hover:bg-gray-50">
                            {warehouse.warehouseName} - {warehouse.location}
                          </SelectItem>
                        ))
                      ) : (
                        <SelectItem value="no-data" disabled className="bg-white hover:bg-gray-50">No warehouses found</SelectItem>
                      )}
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-700 mb-2 block">Expiry Date</label>
                  <Input
                    type="date"
                    value={newLot.expiryDate}
                    onChange={(e) => setNewLot(prev => ({ ...prev, expiryDate: e.target.value }))}
                  />
                </div>
              </div>
              <div className="mt-4">
                <label className="text-sm font-medium text-gray-700 mb-2 block">Remarks</label>
                <Input
                  value={newLot.remarks}
                  onChange={(e) => setNewLot(prev => ({ ...prev, remarks: e.target.value }))}
                  placeholder="Enter remarks (optional)"
                />
              </div>
              <div className="flex gap-2 mt-4">
                <Button onClick={handleAddLot} className="bg-purple-600 hover:bg-purple-700">
                  Add Lot
                </Button>
                <Button variant="outline" onClick={() => setShowAddLotForm(false)}>
                  Cancel
                </Button>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Lots by Status */}
        {lotDetails?.lotsByStatus && (
          <div className="space-y-6">
            {Object.entries(lotDetails.lotsByStatus).map(([status, lots]) => (
              lots.length > 0 && (
                <div key={status}>
                  <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
                    {getStatusIcon(status)}
                    {status.charAt(0).toUpperCase() + status.slice(1)} Lots ({lots.length})
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {lots.map((lot) => (
                      <Card key={lot.lotNumber} className="border-0 shadow-md hover:shadow-lg transition-shadow">
                        <CardContent className="p-4">
                          <div className="flex items-center justify-between mb-3">
                            <h4 className="font-bold text-gray-900">{lot.lotNumber}</h4>
                            <Badge className={getStatusColor(lot.lotStatus)}>
                              {lot.lotStatus}
                            </Badge>
                          </div>
                          
                          <div className="space-y-2">
                            <div className="flex items-center gap-2">
                              <Package className="h-4 w-4 text-gray-500" />
                              <span className="text-sm text-gray-600">{lot.lotQuantity} {lot.lotUnit}</span>
                            </div>
                            
                            <div className="flex items-center gap-2">
                              <Activity className="h-4 w-4 text-gray-500" />
                              <span className="text-sm text-gray-600">Grade: {lot.qualityGrade}</span>
                            </div>
                            
                            <div className="flex items-center gap-2">
                              <DollarSign className="h-4 w-4 text-gray-500" />
                              <span className="text-sm text-gray-600">₹{lot.costPerUnit}/unit</span>
                            </div>
                            
                            <div className="flex items-center gap-2">
                              <Calendar className="h-4 w-4 text-gray-500" />
                              <span className="text-sm text-gray-600">
                                {new Date(lot.receivedDate).toLocaleDateString()}
                              </span>
                            </div>
                            
                            <div className="flex items-center gap-2">
                              <MapPin className="h-4 w-4 text-gray-500" />
                              <span className="text-sm text-gray-600">
                                {lot.storageLocation.warehouseName}
                                {lot.storageLocation.rackNumber && ` - Rack ${lot.storageLocation.rackNumber}`}
                              </span>
                            </div>
                            
                            {lot.expiryDate && (
                              <div className="flex items-center gap-2">
                                <AlertTriangle className="h-4 w-4 text-orange-500" />
                                <span className="text-sm text-orange-600">
                                  Expires: {new Date(lot.expiryDate).toLocaleDateString()}
                                </span>
                              </div>
                            )}
                          </div>
                          
                          {lot.remarks && (
                            <div className="mt-3 p-2 bg-gray-50 rounded">
                              <p className="text-xs text-gray-600">{lot.remarks}</p>
                            </div>
                          )}
                          
                          <div className="flex gap-2 mt-3">
                            {status === 'active' && (
                              <>
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => handleUpdateLotStatus(lot.lotNumber, 'reserved')}
                                  className="text-yellow-600 hover:bg-yellow-50"
                                >
                                  Reserve
                                </Button>
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => handleUpdateLotStatus(lot.lotNumber, 'consumed')}
                                  className="text-blue-600 hover:bg-blue-50"
                                >
                                  Consume
                                </Button>
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => handleUpdateLotStatus(lot.lotNumber, 'damaged')}
                                  className="text-red-600 hover:bg-red-50"
                                >
                                  Mark Damaged
                                </Button>
                              </>
                            )}
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </div>
              )
            ))}
          </div>
        )}

        {(!lotDetails?.lotsByStatus || Object.values(lotDetails.lotsByStatus).every(lots => lots.length === 0)) && (
          <div className="text-center py-8">
            <Package className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <p className="text-gray-500">No lots found for this entry</p>
            <Button 
              onClick={() => setShowAddLotForm(true)}
              className="mt-4 bg-purple-600 hover:bg-purple-700"
            >
              <Plus className="h-4 w-4 mr-2" />
              Add First Lot
            </Button>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
